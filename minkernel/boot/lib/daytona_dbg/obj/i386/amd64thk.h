//
// Autogenerated file, do not edit
//

#include <bldrthnk.h>

#pragma warning(disable:4296)

#pragma pack(push,1)

typedef struct _PHYSICAL_ADDRESS_64 {
    ULONGLONG QuadPart;
} PHYSICAL_ADDRESS_64, *PPHYSICAL_ADDRESS_64;

C_ASSERT( FIELD_OFFSET(PHYSICAL_ADDRESS_64,QuadPart) == 0x0);

typedef struct _PROFILE_PARAMETER_BLOCK_64 {
    USHORT Status;
    UCHAR Reserved0[ 0x2 ];
    USHORT DockingState;
    USHORT Capabilities;
    ULONG DockID;
    ULONG SerialNumber;
} PROFILE_PARAMETER_BLOCK_64, *PPROFILE_PARAMETER_BLOCK_64;

C_ASSERT( FIELD_OFFSET(PROFILE_PARAMETER_BLOCK_64,Status) == 0x0);
C_ASSERT( FIELD_OFFSET(PROFILE_PARAMETER_BLOCK_64,DockingState) == 0x4);
C_ASSERT( FIELD_OFFSET(PROFILE_PARAMETER_BLOCK_64,Capabilities) == 0x6);
C_ASSERT( FIELD_OFFSET(PROFILE_PARAMETER_BLOCK_64,DockID) == 0x8);
C_ASSERT( FIELD_OFFSET(PROFILE_PARAMETER_BLOCK_64,SerialNumber) == 0xc);

typedef struct _UNICODE_STRING_64 {
    USHORT Length;
    USHORT MaximumLength;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 Buffer;
} UNICODE_STRING_64, *PUNICODE_STRING_64;

C_ASSERT( FIELD_OFFSET(UNICODE_STRING_64,Length) == 0x0);
C_ASSERT( FIELD_OFFSET(UNICODE_STRING_64,MaximumLength) == 0x2);
C_ASSERT( FIELD_OFFSET(UNICODE_STRING_64,Buffer) == 0x8);

typedef struct _LIST_ENTRY_64 {
    POINTER64 Flink;
    POINTER64 Blink;
} LIST_ENTRY_64, *PLIST_ENTRY_64;

C_ASSERT( FIELD_OFFSET(LIST_ENTRY_64,Flink) == 0x0);
C_ASSERT( FIELD_OFFSET(LIST_ENTRY_64,Blink) == 0x8);

typedef struct _EPROCESS_64 {
    UCHAR Reserved0[ 0x400 ];
} EPROCESS_64, *PEPROCESS_64;


typedef struct _ETHREAD_64 {
    UCHAR Reserved0[ 0x420 ];
} ETHREAD_64, *PETHREAD_64;


typedef struct _KTHREAD_64 {
    UCHAR Reserved0[ 0x318 ];
} KTHREAD_64, *PKTHREAD_64;


typedef struct _KPRCB_64 {
    UCHAR Reserved0[ 0x1160 ];
} KPRCB_64, *PKPRCB_64;


typedef struct _KGDTENTRY64_64 {
    UCHAR Reserved0[ 0x10 ];
} KGDTENTRY64_64, *PKGDTENTRY64_64;


typedef struct _KIDTENTRY64_64 {
    UCHAR Reserved0[ 0x10 ];
} KIDTENTRY64_64, *PKIDTENTRY64_64;


typedef struct _KTSS64_64 {
    UCHAR Reserved0[ 0x4 ];
    ULONG64 Rsp0;
    ULONG64 Rsp1;
    ULONG64 Rsp2;
    ULONG64 Ist[8];
    UCHAR Reserved1[ 0xc ];
} KTSS64_64, *PKTSS64_64;

C_ASSERT( FIELD_OFFSET(KTSS64_64,Rsp0) == 0x4);
C_ASSERT( FIELD_OFFSET(KTSS64_64,Rsp1) == 0xc);
C_ASSERT( FIELD_OFFSET(KTSS64_64,Rsp2) == 0x14);
C_ASSERT( FIELD_OFFSET(KTSS64_64,Ist) == 0x1c);

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR_64 {
    LIST_ENTRY_64 ListEntry;
    TYPE_OF_MEMORY MemoryType;
    ULONG BasePage;
    ULONG PageCount;
    UCHAR Reserved0[ 0x4 ];
} MEMORY_ALLOCATION_DESCRIPTOR_64, *PMEMORY_ALLOCATION_DESCRIPTOR_64;

C_ASSERT( FIELD_OFFSET(MEMORY_ALLOCATION_DESCRIPTOR_64,ListEntry) == 0x0);
C_ASSERT( FIELD_OFFSET(MEMORY_ALLOCATION_DESCRIPTOR_64,MemoryType) == 0x10);
C_ASSERT( FIELD_OFFSET(MEMORY_ALLOCATION_DESCRIPTOR_64,BasePage) == 0x14);
C_ASSERT( FIELD_OFFSET(MEMORY_ALLOCATION_DESCRIPTOR_64,PageCount) == 0x18);

typedef struct _LDR_DATA_TABLE_ENTRY_64 {
    LIST_ENTRY_64 InLoadOrderLinks;
    LIST_ENTRY_64 InMemoryOrderLinks;
    LIST_ENTRY_64 InInitializationOrderLinks;
    POINTER64 DllBase;
    POINTER64 EntryPoint;
    ULONG SizeOfImage;
    UCHAR Reserved0[ 0x4 ];
    UNICODE_STRING_64 FullDllName;
    UNICODE_STRING_64 BaseDllName;
    ULONG Flags;
    USHORT LoadCount;
    USHORT TlsIndex;
    UCHAR Reserved1[ 0x28 ];
} LDR_DATA_TABLE_ENTRY_64, *PLDR_DATA_TABLE_ENTRY_64;

C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,InLoadOrderLinks) == 0x0);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,InMemoryOrderLinks) == 0x10);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,InInitializationOrderLinks) == 0x20);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,DllBase) == 0x30);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,EntryPoint) == 0x38);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,SizeOfImage) == 0x40);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,FullDllName) == 0x48);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,BaseDllName) == 0x58);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,Flags) == 0x68);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,LoadCount) == 0x6c);
C_ASSERT( FIELD_OFFSET(LDR_DATA_TABLE_ENTRY_64,TlsIndex) == 0x6e);

typedef struct _BOOT_DRIVER_LIST_ENTRY_64 {
    LIST_ENTRY_64 Link;
    UNICODE_STRING_64 FilePath;
    UNICODE_STRING_64 RegistryPath;
    POINTER64 LdrEntry;
} BOOT_DRIVER_LIST_ENTRY_64, *PBOOT_DRIVER_LIST_ENTRY_64;

C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_LIST_ENTRY_64,Link) == 0x0);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_LIST_ENTRY_64,FilePath) == 0x10);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_LIST_ENTRY_64,RegistryPath) == 0x20);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_LIST_ENTRY_64,LdrEntry) == 0x30);

typedef struct _NLS_DATA_BLOCK_64 {
    POINTER64 AnsiCodePageData;
    POINTER64 OemCodePageData;
    POINTER64 UnicodeCaseTableData;
} NLS_DATA_BLOCK_64, *PNLS_DATA_BLOCK_64;

C_ASSERT( FIELD_OFFSET(NLS_DATA_BLOCK_64,AnsiCodePageData) == 0x0);
C_ASSERT( FIELD_OFFSET(NLS_DATA_BLOCK_64,OemCodePageData) == 0x8);
C_ASSERT( FIELD_OFFSET(NLS_DATA_BLOCK_64,UnicodeCaseTableData) == 0x10);

typedef struct _CONFIGURATION_COMPONENT_64 {
    CONFIGURATION_CLASS Class;
    CONFIGURATION_TYPE Type;
    ULONG Flags;
    USHORT Version;
    USHORT Revision;
    ULONG Key;
    ULONG AffinityMask;
    ULONG ConfigurationDataLength;
    ULONG IdentifierLength;
    POINTER64 Identifier;
} CONFIGURATION_COMPONENT_64, *PCONFIGURATION_COMPONENT_64;

C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Class) == 0x0);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Type) == 0x4);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Flags) == 0x8);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Version) == 0xc);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Revision) == 0xe);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Key) == 0x10);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,AffinityMask) == 0x14);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,ConfigurationDataLength) == 0x18);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,IdentifierLength) == 0x1c);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_64,Identifier) == 0x20);

typedef struct _CONFIGURATION_COMPONENT_DATA_64 {
    POINTER64 Parent;
    POINTER64 Child;
    POINTER64 Sibling;
    CONFIGURATION_COMPONENT_64 ComponentEntry;
    POINTER64 ConfigurationData;
} CONFIGURATION_COMPONENT_DATA_64, *PCONFIGURATION_COMPONENT_DATA_64;

C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_DATA_64,Parent) == 0x0);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_DATA_64,Child) == 0x8);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_DATA_64,Sibling) == 0x10);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_DATA_64,ComponentEntry) == 0x18);
C_ASSERT( FIELD_OFFSET(CONFIGURATION_COMPONENT_DATA_64,ConfigurationData) == 0x40);

typedef struct _BOOT_DRIVER_NODE_64 {
    BOOT_DRIVER_LIST_ENTRY_64 ListEntry;
    UNICODE_STRING_64 Group;
    UNICODE_STRING_64 Name;
    ULONG Tag;
    ULONG ErrorControl;
} BOOT_DRIVER_NODE_64, *PBOOT_DRIVER_NODE_64;

C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_NODE_64,ListEntry) == 0x0);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_NODE_64,Group) == 0x38);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_NODE_64,Name) == 0x48);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_NODE_64,Tag) == 0x58);
C_ASSERT( FIELD_OFFSET(BOOT_DRIVER_NODE_64,ErrorControl) == 0x5c);

typedef struct _ARC_DISK_SIGNATURE_64 {
    LIST_ENTRY_64 ListEntry;
    ULONG Signature;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 ArcName;
    ULONG CheckSum;
    BOOLEAN ValidPartitionTable;
    BOOLEAN xInt13;
    UCHAR Reserved1[ 0x12 ];
} ARC_DISK_SIGNATURE_64, *PARC_DISK_SIGNATURE_64;

C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,ListEntry) == 0x0);
C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,Signature) == 0x10);
C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,ArcName) == 0x18);
C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,CheckSum) == 0x20);
C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,ValidPartitionTable) == 0x24);
C_ASSERT( FIELD_OFFSET(ARC_DISK_SIGNATURE_64,xInt13) == 0x25);

typedef struct _ARC_DISK_INFORMATION_64 {
    LIST_ENTRY_64 DiskSignatures;
} ARC_DISK_INFORMATION_64, *PARC_DISK_INFORMATION_64;

C_ASSERT( FIELD_OFFSET(ARC_DISK_INFORMATION_64,DiskSignatures) == 0x0);

typedef struct _DETECTED_DEVICE_REGISTRY_64 {
    POINTER64 Next;
    POINTER64 KeyName;
    POINTER64 ValueName;
    ULONG ValueType;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 Buffer;
    ULONG BufferSize;
    UCHAR Reserved1[ 0x4 ];
} DETECTED_DEVICE_REGISTRY_64, *PDETECTED_DEVICE_REGISTRY_64;

C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,Next) == 0x0);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,KeyName) == 0x8);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,ValueName) == 0x10);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,ValueType) == 0x18);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,Buffer) == 0x20);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_REGISTRY_64,BufferSize) == 0x28);

typedef struct _DETECTED_DEVICE_FILE_64 {
    POINTER64 Next;
    POINTER64 Filename;
    HwFileType FileType;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 ConfigName;
    POINTER64 RegistryValueList;
    POINTER64 DiskDescription;
    POINTER64 DiskTagfile;
    POINTER64 Directory;
    UCHAR Reserved1[ 0x8 ];
} DETECTED_DEVICE_FILE_64, *PDETECTED_DEVICE_FILE_64;

C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,Next) == 0x0);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,Filename) == 0x8);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,FileType) == 0x10);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,ConfigName) == 0x18);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,RegistryValueList) == 0x20);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,DiskDescription) == 0x28);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,DiskTagfile) == 0x30);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_FILE_64,Directory) == 0x38);

typedef struct _DETECTED_DEVICE_64 {
    POINTER64 Next;
    POINTER64 IdString;
    ULONG Ordinal;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 Description;
    BOOLEAN ThirdPartyOptionSelected;
    UCHAR Reserved1[ 0x3 ];
    ULONG FileTypeBits;
    POINTER64 Files;
    POINTER64 BaseDllName;
    BOOLEAN MigratedDriver;
    UCHAR Reserved2[ 0xf ];
} DETECTED_DEVICE_64, *PDETECTED_DEVICE_64;

C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,Next) == 0x0);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,IdString) == 0x8);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,Ordinal) == 0x10);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,Description) == 0x18);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,ThirdPartyOptionSelected) == 0x20);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,FileTypeBits) == 0x24);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,Files) == 0x28);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,BaseDllName) == 0x30);
C_ASSERT( FIELD_OFFSET(DETECTED_DEVICE_64,MigratedDriver) == 0x38);

typedef struct _PNP_HARDWARE_ID_64 {
    POINTER64 Next;
    POINTER64 Id;
    POINTER64 DriverName;
    POINTER64 ClassGuid;
} PNP_HARDWARE_ID_64, *PPNP_HARDWARE_ID_64;

C_ASSERT( FIELD_OFFSET(PNP_HARDWARE_ID_64,Next) == 0x0);
C_ASSERT( FIELD_OFFSET(PNP_HARDWARE_ID_64,Id) == 0x8);
C_ASSERT( FIELD_OFFSET(PNP_HARDWARE_ID_64,DriverName) == 0x10);
C_ASSERT( FIELD_OFFSET(PNP_HARDWARE_ID_64,ClassGuid) == 0x18);

typedef struct _SETUP_LOADER_BLOCK_SCALARS_64 {
    ULONG SetupOperation;
    ULONG AsULong;
} SETUP_LOADER_BLOCK_SCALARS_64, *PSETUP_LOADER_BLOCK_SCALARS_64;

C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_SCALARS_64,SetupOperation) == 0x0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_SCALARS_64,AsULong) == 0x4);

typedef struct _SETUP_LOADER_BLOCK_64 {
    POINTER64 ArcSetupDeviceName;
    DETECTED_DEVICE_64 VideoDevice;
    POINTER64 KeyboardDevices;
    DETECTED_DEVICE_64 ComputerDevice;
    POINTER64 ScsiDevices;
    UCHAR Reserved0[ 0x8 ];
    SETUP_LOADER_BLOCK_SCALARS_64 ScalarValues;
    POINTER64 IniFile;
    ULONG IniFileLength;
    UCHAR Reserved1[ 0x4 ];
    POINTER64 WinntSifFile;
    ULONG WinntSifFileLength;
    UCHAR Reserved2[ 0x4 ];
    POINTER64 MigrateInfFile;
    ULONG MigrateInfFileLength;
    UCHAR Reserved3[ 0x4 ];
    POINTER64 UnsupDriversInfFile;
    ULONG UnsupDriversInfFileLength;
    UCHAR Reserved4[ 0x4 ];
    POINTER64 BootFontFile;
    ULONG BootFontFileLength;
    UCHAR Reserved5[ 0x4 ];
    POINTER64 Monitor;
    POINTER64 MonitorId;
    POINTER64 BootBusExtenders;
    POINTER64 BusExtenders;
    POINTER64 InputDevicesSupport;
    POINTER64 HardwareIdDatabase;
    WCHAR ComputerName[64];
    ULONG IpAddress;
    ULONG SubnetMask;
    ULONG ServerIpAddress;
    ULONG DefaultRouter;
    ULONG DnsNameServer;
    WCHAR NetbootCardHardwareId[64];
    WCHAR NetbootCardDriverName[24];
    WCHAR NetbootCardServiceName[24];
    UCHAR Reserved6[ 0x4 ];
    POINTER64 NetbootCardRegistry;
    ULONG NetbootCardRegistryLength;
    UCHAR Reserved7[ 0x4 ];
    POINTER64 NetbootCardInfo;
    ULONG NetbootCardInfoLength;
    ULONG Flags;
    POINTER64 MachineDirectoryPath;
    POINTER64 NetBootSifPath;
    POINTER64 NetBootSecret;
    WCHAR NetBootIMirrorFilePath[130];
    UCHAR Reserved8[ 0x4 ];
    POINTER64 ASRPnPSifFile;
    ULONG ASRPnPSifFileLength;
    WCHAR NetBootAdministratorPassword[32];
    UCHAR Reserved9[ 0x4 ];
} SETUP_LOADER_BLOCK_64, *PSETUP_LOADER_BLOCK_64;

C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ArcSetupDeviceName) == 0x0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,VideoDevice) == 0x8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,KeyboardDevices) == 0x50);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ComputerDevice) == 0x58);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ScsiDevices) == 0xa0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ScalarValues) == 0xb0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,IniFile) == 0xb8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,IniFileLength) == 0xc0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,WinntSifFile) == 0xc8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,WinntSifFileLength) == 0xd0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,MigrateInfFile) == 0xd8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,MigrateInfFileLength) == 0xe0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,UnsupDriversInfFile) == 0xe8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,UnsupDriversInfFileLength) == 0xf0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,BootFontFile) == 0xf8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,BootFontFileLength) == 0x100);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,Monitor) == 0x108);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,MonitorId) == 0x110);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,BootBusExtenders) == 0x118);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,BusExtenders) == 0x120);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,InputDevicesSupport) == 0x128);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,HardwareIdDatabase) == 0x130);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ComputerName) == 0x138);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,IpAddress) == 0x1b8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,SubnetMask) == 0x1bc);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ServerIpAddress) == 0x1c0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,DefaultRouter) == 0x1c4);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,DnsNameServer) == 0x1c8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardHardwareId) == 0x1cc);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardDriverName) == 0x24c);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardServiceName) == 0x27c);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardRegistry) == 0x2b0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardRegistryLength) == 0x2b8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardInfo) == 0x2c0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetbootCardInfoLength) == 0x2c8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,Flags) == 0x2cc);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,MachineDirectoryPath) == 0x2d0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetBootSifPath) == 0x2d8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetBootSecret) == 0x2e0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetBootIMirrorFilePath) == 0x2e8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ASRPnPSifFile) == 0x3f0);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,ASRPnPSifFileLength) == 0x3f8);
C_ASSERT( FIELD_OFFSET(SETUP_LOADER_BLOCK_64,NetBootAdministratorPassword) == 0x3fc);

typedef struct _I386_LOADER_BLOCK_64 {
    POINTER64 CommonDataArea;
    ULONG MachineType;
    ULONG VirtualBias;
} I386_LOADER_BLOCK_64, *PI386_LOADER_BLOCK_64;

C_ASSERT( FIELD_OFFSET(I386_LOADER_BLOCK_64,CommonDataArea) == 0x0);
C_ASSERT( FIELD_OFFSET(I386_LOADER_BLOCK_64,MachineType) == 0x8);
C_ASSERT( FIELD_OFFSET(I386_LOADER_BLOCK_64,VirtualBias) == 0xc);

typedef struct _LOADER_PARAMETER_EXTENSION_64 {
    ULONG Size;
    PROFILE_PARAMETER_BLOCK_64 Profile;
    ULONG MajorVersion;
    ULONG MinorVersion;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 InfFileImage;
    ULONG InfFileSize;
    UCHAR Reserved1[ 0x4 ];
    POINTER64 TriageDumpBlock;
    ULONG LoaderPagesSpanned;
    UCHAR Reserved2[ 0x4 ];
    POINTER64 HeadlessLoaderBlock;
    POINTER64 SMBiosEPSHeader;
    POINTER64 DrvDBImage;
    ULONG DrvDBSize;
    UCHAR Reserved3[ 0xc ];
    LIST_ENTRY_64 FirmwareDescriptorListHead;
} LOADER_PARAMETER_EXTENSION_64, *PLOADER_PARAMETER_EXTENSION_64;

C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,Size) == 0x0);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,Profile) == 0x4);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,MajorVersion) == 0x14);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,MinorVersion) == 0x18);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,InfFileImage) == 0x20);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,InfFileSize) == 0x28);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,TriageDumpBlock) == 0x30);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,LoaderPagesSpanned) == 0x38);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,HeadlessLoaderBlock) == 0x40);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,SMBiosEPSHeader) == 0x48);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,DrvDBImage) == 0x50);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,DrvDBSize) == 0x58);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_EXTENSION_64,FirmwareDescriptorListHead) == 0x68);

typedef struct _LOADER_PARAMETER_BLOCK_64 {
    LIST_ENTRY_64 LoadOrderListHead;
    LIST_ENTRY_64 MemoryDescriptorListHead;
    LIST_ENTRY_64 BootDriverListHead;
    POINTER64 KernelStack;
    POINTER64 Prcb;
    POINTER64 Process;
    POINTER64 Thread;
    ULONG RegistryLength;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 RegistryBase;
    POINTER64 ConfigurationRoot;
    POINTER64 ArcBootDeviceName;
    POINTER64 ArcHalDeviceName;
    POINTER64 NtBootPathName;
    POINTER64 NtHalPathName;
    POINTER64 LoadOptions;
    POINTER64 NlsData;
    POINTER64 ArcDiskInformation;
    POINTER64 OemFontFile;
    POINTER64 SetupLoaderBlock;
    POINTER64 Extension;
    UCHAR Reserved1[ 0x10 ];
} LOADER_PARAMETER_BLOCK_64, *PLOADER_PARAMETER_BLOCK_64;

C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,LoadOrderListHead) == 0x0);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,MemoryDescriptorListHead) == 0x10);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,BootDriverListHead) == 0x20);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,KernelStack) == 0x30);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,Prcb) == 0x38);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,Process) == 0x40);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,Thread) == 0x48);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,RegistryLength) == 0x50);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,RegistryBase) == 0x58);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,ConfigurationRoot) == 0x60);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,ArcBootDeviceName) == 0x68);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,ArcHalDeviceName) == 0x70);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,NtBootPathName) == 0x78);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,NtHalPathName) == 0x80);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,LoadOptions) == 0x88);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,NlsData) == 0x90);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,ArcDiskInformation) == 0x98);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,OemFontFile) == 0xa0);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,SetupLoaderBlock) == 0xa8);
C_ASSERT( FIELD_OFFSET(LOADER_PARAMETER_BLOCK_64,Extension) == 0xb0);

typedef struct _CM_PRD_GENERIC_64 {
    PHYSICAL_ADDRESS_64 Start;
    ULONG Length;
    UCHAR Reserved0[ 0x4 ];
} CM_PRD_GENERIC_64, *PCM_PRD_GENERIC_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_GENERIC_64,Start) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_GENERIC_64,Length) == 0x8);

typedef struct _CM_PRD_PORT_64 {
    PHYSICAL_ADDRESS_64 Start;
    ULONG Length;
    UCHAR Reserved0[ 0x4 ];
} CM_PRD_PORT_64, *PCM_PRD_PORT_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_PORT_64,Start) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_PORT_64,Length) == 0x8);

typedef struct _CM_PRD_INTERRUPT_64 {
    ULONG Level;
    ULONG Vector;
    POINTER64 Affinity;
} CM_PRD_INTERRUPT_64, *PCM_PRD_INTERRUPT_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_INTERRUPT_64,Level) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_INTERRUPT_64,Vector) == 0x4);
C_ASSERT( FIELD_OFFSET(CM_PRD_INTERRUPT_64,Affinity) == 0x8);

typedef struct _CM_PRD_MEMORY_64 {
    PHYSICAL_ADDRESS_64 Start;
    ULONG Length;
    UCHAR Reserved0[ 0x4 ];
} CM_PRD_MEMORY_64, *PCM_PRD_MEMORY_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_MEMORY_64,Start) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_MEMORY_64,Length) == 0x8);

typedef struct _CM_PRD_DMA_64 {
    ULONG Channel;
    ULONG Port;
    UCHAR Reserved0[ 0x4 ];
} CM_PRD_DMA_64, *PCM_PRD_DMA_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_DMA_64,Channel) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_DMA_64,Port) == 0x4);

typedef struct _CM_PRD_DEVICEPRIVATE_64 {
    ULONG Data[3];
} CM_PRD_DEVICEPRIVATE_64, *PCM_PRD_DEVICEPRIVATE_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_DEVICEPRIVATE_64,Data) == 0x0);

typedef struct _CM_PRD_BUSNUMBER_64 {
    ULONG Start;
    ULONG Length;
    ULONG Reserved;
} CM_PRD_BUSNUMBER_64, *PCM_PRD_BUSNUMBER_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_BUSNUMBER_64,Start) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_BUSNUMBER_64,Length) == 0x4);
C_ASSERT( FIELD_OFFSET(CM_PRD_BUSNUMBER_64,Reserved) == 0x8);

typedef struct _CM_PRD_DEVICESPECIFICDATA_64 {
    ULONG DataSize;
    ULONG Reserved1;
    ULONG Reserved2;
} CM_PRD_DEVICESPECIFICDATA_64, *PCM_PRD_DEVICESPECIFICDATA_64;

C_ASSERT( FIELD_OFFSET(CM_PRD_DEVICESPECIFICDATA_64,DataSize) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PRD_DEVICESPECIFICDATA_64,Reserved1) == 0x4);
C_ASSERT( FIELD_OFFSET(CM_PRD_DEVICESPECIFICDATA_64,Reserved2) == 0x8);

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR_64 {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    CM_PRD_INTERRUPT_64 u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR_64, *PCM_PARTIAL_RESOURCE_DESCRIPTOR_64;

C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_DESCRIPTOR_64,Type) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_DESCRIPTOR_64,ShareDisposition) == 0x1);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_DESCRIPTOR_64,Flags) == 0x2);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_DESCRIPTOR_64,u) == 0x4);

typedef struct _CM_PARTIAL_RESOURCE_LIST_64 {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    CM_PARTIAL_RESOURCE_DESCRIPTOR_64 PartialDescriptors;
} CM_PARTIAL_RESOURCE_LIST_64, *PCM_PARTIAL_RESOURCE_LIST_64;

C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_LIST_64,Version) == 0x0);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_LIST_64,Revision) == 0x2);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_LIST_64,Count) == 0x4);
C_ASSERT( FIELD_OFFSET(CM_PARTIAL_RESOURCE_LIST_64,PartialDescriptors) == 0x8);

typedef struct _LARGE_INTEGER_64 {
    ULONG LowPart;
    LONG HighPart;
} LARGE_INTEGER_64, *PLARGE_INTEGER_64;

C_ASSERT( FIELD_OFFSET(LARGE_INTEGER_64,LowPart) == 0x0);
C_ASSERT( FIELD_OFFSET(LARGE_INTEGER_64,HighPart) == 0x4);

typedef struct _PO_HIBER_PERF_64 {
    ULONGLONG IoTicks;
    ULONGLONG InitTicks;
    ULONGLONG CopyTicks;
    ULONGLONG StartCount;
    ULONG ElapsedTime;
    ULONG IoTime;
    ULONG CopyTime;
    ULONG InitTime;
    ULONG PagesWritten;
    ULONG PagesProcessed;
    ULONG BytesCopied;
    ULONG DumpCount;
    ULONG FileRuns;
    UCHAR Reserved0[ 0x4 ];
} PO_HIBER_PERF_64, *PPO_HIBER_PERF_64;

C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,IoTicks) == 0x0);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,InitTicks) == 0x8);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,CopyTicks) == 0x10);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,StartCount) == 0x18);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,ElapsedTime) == 0x20);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,IoTime) == 0x24);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,CopyTime) == 0x28);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,InitTime) == 0x2c);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,PagesWritten) == 0x30);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,PagesProcessed) == 0x34);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,BytesCopied) == 0x38);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,DumpCount) == 0x3c);
C_ASSERT( FIELD_OFFSET(PO_HIBER_PERF_64,FileRuns) == 0x40);

typedef struct _PO_MEMORY_IMAGE_64 {
    ULONG Signature;
    ULONG Version;
    ULONG CheckSum;
    ULONG LengthSelf;
    POINTER64 PageSelf;
    ULONG PageSize;
    ULONG ImageType;
    LARGE_INTEGER_64 SystemTime;
    ULONGLONG InterruptTime;
    ULONG FeatureFlags;
    UCHAR HiberFlags;
    UCHAR spare[3];
    ULONG NoHiberPtes;
    UCHAR Reserved0[ 0x4 ];
    POINTER64 HiberVa;
    PHYSICAL_ADDRESS_64 HiberPte;
    ULONG NoFreePages;
    ULONG FreeMapCheck;
    ULONG WakeCheck;
    UCHAR Reserved1[ 0x4 ];
    POINTER64 TotalPages;
    POINTER64 FirstTablePage;
    POINTER64 LastFilePage;
    PO_HIBER_PERF_64 PerfInfo;
} PO_MEMORY_IMAGE_64, *PPO_MEMORY_IMAGE_64;

C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,Signature) == 0x0);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,Version) == 0x4);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,CheckSum) == 0x8);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,LengthSelf) == 0xc);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,PageSelf) == 0x10);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,PageSize) == 0x18);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,ImageType) == 0x1c);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,SystemTime) == 0x20);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,InterruptTime) == 0x28);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,FeatureFlags) == 0x30);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,HiberFlags) == 0x34);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,spare) == 0x35);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,NoHiberPtes) == 0x38);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,HiberVa) == 0x40);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,HiberPte) == 0x48);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,NoFreePages) == 0x50);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,FreeMapCheck) == 0x54);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,WakeCheck) == 0x58);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,TotalPages) == 0x60);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,FirstTablePage) == 0x68);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,LastFilePage) == 0x70);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_IMAGE_64,PerfInfo) == 0x78);

typedef struct _PO_MEMORY_RANGE_ARRAY_RANGE_64 {
    POINTER64 PageNo;
    POINTER64 StartPage;
    POINTER64 EndPage;
    ULONG CheckSum;
    UCHAR Reserved0[ 0x4 ];
} PO_MEMORY_RANGE_ARRAY_RANGE_64, *PPO_MEMORY_RANGE_ARRAY_RANGE_64;

C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_RANGE_64,PageNo) == 0x0);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_RANGE_64,StartPage) == 0x8);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_RANGE_64,EndPage) == 0x10);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_RANGE_64,CheckSum) == 0x18);

typedef struct _PO_MEMORY_RANGE_ARRAY_LINK_64 {
    POINTER64 Next;
    POINTER64 NextTable;
    ULONG CheckSum;
    ULONG EntryCount;
} PO_MEMORY_RANGE_ARRAY_LINK_64, *PPO_MEMORY_RANGE_ARRAY_LINK_64;

C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_LINK_64,Next) == 0x0);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_LINK_64,NextTable) == 0x8);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_LINK_64,CheckSum) == 0x10);
C_ASSERT( FIELD_OFFSET(PO_MEMORY_RANGE_ARRAY_LINK_64,EntryCount) == 0x14);

#pragma pack(pop)

COPY_REC cr3264_PHYSICAL_ADDRESS[] = {
    { 	0x0, 	0x0, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PROFILE_PARAMETER_BLOCK[] = {
    { 	0x0, 	0x0, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x4, 	0x4, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x6, 	0x6, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0xc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_UNICODE_STRING[] = {
    { 	0x0, 	0x0, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x2, 	0x2, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_LIST_ENTRY[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_MEMORY_ALLOCATION_DESCRIPTOR[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(TYPE_OF_MEMORY) },
    { 	0xc, 	0x14, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_LDR_DATA_TABLE_ENTRY[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x18, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x1c, 	0x38, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x20, 	0x40, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x24, 	0x48, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x26, 	0x4a, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x28, 	0x50, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x2c, 	0x58, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x2e, 	0x5a, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x30, 	0x60, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x34, 	0x68, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x38, 	0x6c, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x3a, 	0x6e, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_BOOT_DRIVER_LIST_ENTRY[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xa, 	0x12, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x12, 	0x22, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x14, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x18, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_NLS_DATA_BLOCK[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CONFIGURATION_COMPONENT[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(CONFIGURATION_CLASS) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(CONFIGURATION_TYPE) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0xc, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xe, 	0xe, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x10, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x14, 	0x14, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x18, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x1c, 	0x1c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x20, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CONFIGURATION_COMPONENT_DATA[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(CONFIGURATION_CLASS) },
    { 	0x10, 	0x1c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(CONFIGURATION_TYPE) },
    { 	0x14, 	0x20, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x18, 	0x24, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x1a, 	0x26, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x1c, 	0x28, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x20, 	0x2c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x24, 	0x30, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x28, 	0x34, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x2c, 	0x38, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x30, 	0x40, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_BOOT_DRIVER_NODE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xa, 	0x12, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x12, 	0x22, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x14, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x18, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x1c, 	0x38, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x1e, 	0x3a, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x20, 	0x40, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x24, 	0x48, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x26, 	0x4a, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x28, 	0x50, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x2c, 	0x58, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x30, 	0x5c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_ARC_DISK_SIGNATURE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x14, 	0x24, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x15, 	0x25, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_ARC_DISK_INFORMATION[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_DETECTED_DEVICE_REGISTRY[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x28, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_DETECTED_DEVICE_FILE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(HwFileType) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x18, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x1c, 	0x38, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_DETECTED_DEVICE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x14, 	0x24, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x18, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x1c, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x20, 	0x38, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PNP_HARDWARE_ID[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_SETUP_LOADER_BLOCK_SCALARS[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_SETUP_LOADER_BLOCK[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x28, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x18, 	0x2c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x1c, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x20, 	0x38, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x24, 	0x40, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x2c, 	0x50, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x30, 	0x58, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x34, 	0x60, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x38, 	0x68, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x3c, 	0x70, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x40, 	0x78, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x44, 	0x7c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x48, 	0x80, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4c, 	0x88, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x50, 	0x90, 	0x1, 	0x1, 	IS_SIGNED_TYPE(BOOLEAN) },
    { 	0x58, 	0xa0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x60, 	0xb0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x64, 	0xb4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x68, 	0xb8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x6c, 	0xc0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x70, 	0xc8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x74, 	0xd0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x78, 	0xd8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x7c, 	0xe0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x80, 	0xe8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x84, 	0xf0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x88, 	0xf8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8c, 	0x100, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x90, 	0x108, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x94, 	0x110, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x98, 	0x118, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x9c, 	0x120, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xa0, 	0x128, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xa4, 	0x130, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xa8, 	0x138, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x128, 	0x1b8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x12c, 	0x1bc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x130, 	0x1c0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x134, 	0x1c4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x138, 	0x1c8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x13c, 	0x1cc, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x1bc, 	0x24c, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x1ec, 	0x27c, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x21c, 	0x2b0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x220, 	0x2b8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x224, 	0x2c0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x228, 	0x2c8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x22c, 	0x2cc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x230, 	0x2d0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x234, 	0x2d8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x238, 	0x2e0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x23c, 	0x2e8, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x340, 	0x3f0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x344, 	0x3f8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x348, 	0x3fc, 	0x80, 	0x80, 	IS_SIGNED_TYPE(WCHAR) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_I386_LOADER_BLOCK[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0xc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_LOADER_PARAMETER_EXTENSION[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x8, 	0x8, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xa, 	0xa, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xc, 	0xc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x14, 	0x14, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x18, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x1c, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x20, 	0x28, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x24, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x28, 	0x38, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x2c, 	0x40, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x30, 	0x48, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x34, 	0x50, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x38, 	0x58, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x48, 	0x68, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4c, 	0x70, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_LOADER_PARAMETER_BLOCK[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x10, 	0x20, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x28, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x18, 	0x30, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x1c, 	0x38, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x20, 	0x40, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x24, 	0x48, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x28, 	0x50, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x2c, 	0x58, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x30, 	0x60, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x34, 	0x68, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x38, 	0x70, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x3c, 	0x78, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x40, 	0x80, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x44, 	0x88, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x48, 	0x90, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4c, 	0x98, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x50, 	0xa0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x54, 	0xa8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x58, 	0xb0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_GENERIC[] = {
    { 	0x0, 	0x0, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_PORT[] = {
    { 	0x0, 	0x0, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_INTERRUPT[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_MEMORY[] = {
    { 	0x0, 	0x0, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_DMA[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_DEVICEPRIVATE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_BUSNUMBER[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PRD_DEVICESPECIFICDATA[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PARTIAL_RESOURCE_DESCRIPTOR[] = {
    { 	0x0, 	0x0, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0x1, 	0x1, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0x2, 	0x2, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0xc, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_CM_PARTIAL_RESOURCE_LIST[] = {
    { 	0x0, 	0x0, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x2, 	0x2, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0x9, 	0x9, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0xa, 	0xa, 	0x2, 	0x2, 	IS_SIGNED_TYPE(USHORT) },
    { 	0xc, 	0xc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x14, 	0x14, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_LARGE_INTEGER[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(LONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PO_HIBER_PERF[] = {
    { 	0x0, 	0x0, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x8, 	0x8, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x10, 	0x10, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x18, 	0x18, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x20, 	0x20, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x24, 	0x24, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x28, 	0x28, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x2c, 	0x2c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x30, 	0x30, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x34, 	0x34, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x38, 	0x38, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x3c, 	0x3c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x40, 	0x40, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PO_MEMORY_IMAGE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4, 	0x4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8, 	0x8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0xc, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x10, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x14, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x18, 	0x1c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x20, 	0x20, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x24, 	0x24, 	0x4, 	0x4, 	IS_SIGNED_TYPE(LONG) },
    { 	0x28, 	0x28, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x30, 	0x30, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x34, 	0x34, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0x35, 	0x35, 	0x1, 	0x1, 	IS_SIGNED_TYPE(UCHAR) },
    { 	0x38, 	0x38, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x3c, 	0x40, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x40, 	0x48, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x48, 	0x50, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x4c, 	0x54, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x50, 	0x58, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x54, 	0x60, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x58, 	0x68, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x5c, 	0x70, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x60, 	0x78, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x68, 	0x80, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x70, 	0x88, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x78, 	0x90, 	0x8, 	0x8, 	IS_SIGNED_TYPE(ULONGLONG) },
    { 	0x80, 	0x98, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x84, 	0x9c, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x88, 	0xa0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x8c, 	0xa4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x90, 	0xa8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x94, 	0xac, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x98, 	0xb0, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x9c, 	0xb4, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xa0, 	0xb8, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PO_MEMORY_RANGE_ARRAY_RANGE[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0xc, 	0x18, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};

COPY_REC cr3264_PO_MEMORY_RANGE_ARRAY_LINK[] = {
    { 	0x0, 	0x0, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x4, 	0x8, 	0x4, 	0x8, 	IS_SIGNED_TYPE(POINTER64) },
    { 	0x8, 	0x10, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0xc, 	0x14, 	0x4, 	0x4, 	IS_SIGNED_TYPE(ULONG) },
    { 	0x0, 	0x0, 	0x0, 	0x0, 	FALSE }
};


ARC_STATUS
__inline
static
Copy_PHYSICAL_ADDRESS(
    IN PHYSICAL_ADDRESS *Source,
    OUT PHYSICAL_ADDRESS_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PHYSICAL_ADDRESS->PHYSICAL_ADDRESS_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PHYSICAL_ADDRESS );
    return status;
}


ARC_STATUS
__inline
static
Copy_PROFILE_PARAMETER_BLOCK(
    IN PROFILE_PARAMETER_BLOCK *Source,
    OUT PROFILE_PARAMETER_BLOCK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PROFILE_PARAMETER_BLOCK->PROFILE_PARAMETER_BLOCK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PROFILE_PARAMETER_BLOCK );
    return status;
}


ARC_STATUS
__inline
static
Copy_UNICODE_STRING(
    IN UNICODE_STRING *Source,
    OUT UNICODE_STRING_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy UNICODE_STRING->UNICODE_STRING_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_UNICODE_STRING );
    return status;
}


ARC_STATUS
__inline
static
Copy_LIST_ENTRY(
    IN LIST_ENTRY *Source,
    OUT LIST_ENTRY_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy LIST_ENTRY->LIST_ENTRY_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_LIST_ENTRY );
    return status;
}


ARC_STATUS
__inline
static
Copy_MEMORY_ALLOCATION_DESCRIPTOR(
    IN MEMORY_ALLOCATION_DESCRIPTOR *Source,
    OUT MEMORY_ALLOCATION_DESCRIPTOR_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy MEMORY_ALLOCATION_DESCRIPTOR->MEMORY_ALLOCATION_DESCRIPTOR_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_MEMORY_ALLOCATION_DESCRIPTOR );
    return status;
}


ARC_STATUS
__inline
static
Copy_LDR_DATA_TABLE_ENTRY(
    IN LDR_DATA_TABLE_ENTRY *Source,
    OUT LDR_DATA_TABLE_ENTRY_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy LDR_DATA_TABLE_ENTRY->LDR_DATA_TABLE_ENTRY_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_LDR_DATA_TABLE_ENTRY );
    return status;
}


ARC_STATUS
__inline
static
Copy_BOOT_DRIVER_LIST_ENTRY(
    IN BOOT_DRIVER_LIST_ENTRY *Source,
    OUT BOOT_DRIVER_LIST_ENTRY_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy BOOT_DRIVER_LIST_ENTRY->BOOT_DRIVER_LIST_ENTRY_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_BOOT_DRIVER_LIST_ENTRY );
    return status;
}


ARC_STATUS
__inline
static
Copy_NLS_DATA_BLOCK(
    IN NLS_DATA_BLOCK *Source,
    OUT NLS_DATA_BLOCK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy NLS_DATA_BLOCK->NLS_DATA_BLOCK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_NLS_DATA_BLOCK );
    return status;
}


ARC_STATUS
__inline
static
Copy_CONFIGURATION_COMPONENT(
    IN CONFIGURATION_COMPONENT *Source,
    OUT CONFIGURATION_COMPONENT_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CONFIGURATION_COMPONENT->CONFIGURATION_COMPONENT_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CONFIGURATION_COMPONENT );
    return status;
}


ARC_STATUS
__inline
static
Copy_CONFIGURATION_COMPONENT_DATA(
    IN CONFIGURATION_COMPONENT_DATA *Source,
    OUT CONFIGURATION_COMPONENT_DATA_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CONFIGURATION_COMPONENT_DATA->CONFIGURATION_COMPONENT_DATA_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CONFIGURATION_COMPONENT_DATA );
    return status;
}


ARC_STATUS
__inline
static
Copy_BOOT_DRIVER_NODE(
    IN BOOT_DRIVER_NODE *Source,
    OUT BOOT_DRIVER_NODE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy BOOT_DRIVER_NODE->BOOT_DRIVER_NODE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_BOOT_DRIVER_NODE );
    return status;
}


ARC_STATUS
__inline
static
Copy_ARC_DISK_SIGNATURE(
    IN ARC_DISK_SIGNATURE *Source,
    OUT ARC_DISK_SIGNATURE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy ARC_DISK_SIGNATURE->ARC_DISK_SIGNATURE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_ARC_DISK_SIGNATURE );
    return status;
}


ARC_STATUS
__inline
static
Copy_ARC_DISK_INFORMATION(
    IN ARC_DISK_INFORMATION *Source,
    OUT ARC_DISK_INFORMATION_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy ARC_DISK_INFORMATION->ARC_DISK_INFORMATION_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_ARC_DISK_INFORMATION );
    return status;
}


ARC_STATUS
__inline
static
Copy_DETECTED_DEVICE_REGISTRY(
    IN DETECTED_DEVICE_REGISTRY *Source,
    OUT DETECTED_DEVICE_REGISTRY_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy DETECTED_DEVICE_REGISTRY->DETECTED_DEVICE_REGISTRY_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_DETECTED_DEVICE_REGISTRY );
    return status;
}


ARC_STATUS
__inline
static
Copy_DETECTED_DEVICE_FILE(
    IN DETECTED_DEVICE_FILE *Source,
    OUT DETECTED_DEVICE_FILE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy DETECTED_DEVICE_FILE->DETECTED_DEVICE_FILE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_DETECTED_DEVICE_FILE );
    return status;
}


ARC_STATUS
__inline
static
Copy_DETECTED_DEVICE(
    IN DETECTED_DEVICE *Source,
    OUT DETECTED_DEVICE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy DETECTED_DEVICE->DETECTED_DEVICE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_DETECTED_DEVICE );
    return status;
}


ARC_STATUS
__inline
static
Copy_PNP_HARDWARE_ID(
    IN PNP_HARDWARE_ID *Source,
    OUT PNP_HARDWARE_ID_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PNP_HARDWARE_ID->PNP_HARDWARE_ID_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PNP_HARDWARE_ID );
    return status;
}


ARC_STATUS
__inline
static
Copy_SETUP_LOADER_BLOCK_SCALARS(
    IN SETUP_LOADER_BLOCK_SCALARS *Source,
    OUT SETUP_LOADER_BLOCK_SCALARS_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy SETUP_LOADER_BLOCK_SCALARS->SETUP_LOADER_BLOCK_SCALARS_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_SETUP_LOADER_BLOCK_SCALARS );
    return status;
}


ARC_STATUS
__inline
static
Copy_SETUP_LOADER_BLOCK(
    IN SETUP_LOADER_BLOCK *Source,
    OUT SETUP_LOADER_BLOCK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy SETUP_LOADER_BLOCK->SETUP_LOADER_BLOCK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_SETUP_LOADER_BLOCK );
    return status;
}


ARC_STATUS
__inline
static
Copy_I386_LOADER_BLOCK(
    IN I386_LOADER_BLOCK *Source,
    OUT I386_LOADER_BLOCK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy I386_LOADER_BLOCK->I386_LOADER_BLOCK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_I386_LOADER_BLOCK );
    return status;
}


ARC_STATUS
__inline
static
Copy_LOADER_PARAMETER_EXTENSION(
    IN LOADER_PARAMETER_EXTENSION *Source,
    OUT LOADER_PARAMETER_EXTENSION_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy LOADER_PARAMETER_EXTENSION->LOADER_PARAMETER_EXTENSION_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_LOADER_PARAMETER_EXTENSION );
    return status;
}


ARC_STATUS
__inline
static
Copy_LOADER_PARAMETER_BLOCK(
    IN LOADER_PARAMETER_BLOCK *Source,
    OUT LOADER_PARAMETER_BLOCK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy LOADER_PARAMETER_BLOCK->LOADER_PARAMETER_BLOCK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_LOADER_PARAMETER_BLOCK );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_GENERIC(
    IN CM_PRD_GENERIC *Source,
    OUT CM_PRD_GENERIC_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_GENERIC->CM_PRD_GENERIC_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_GENERIC );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_PORT(
    IN CM_PRD_PORT *Source,
    OUT CM_PRD_PORT_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_PORT->CM_PRD_PORT_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_PORT );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_INTERRUPT(
    IN CM_PRD_INTERRUPT *Source,
    OUT CM_PRD_INTERRUPT_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_INTERRUPT->CM_PRD_INTERRUPT_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_INTERRUPT );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_MEMORY(
    IN CM_PRD_MEMORY *Source,
    OUT CM_PRD_MEMORY_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_MEMORY->CM_PRD_MEMORY_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_MEMORY );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_DMA(
    IN CM_PRD_DMA *Source,
    OUT CM_PRD_DMA_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_DMA->CM_PRD_DMA_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_DMA );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_DEVICEPRIVATE(
    IN CM_PRD_DEVICEPRIVATE *Source,
    OUT CM_PRD_DEVICEPRIVATE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_DEVICEPRIVATE->CM_PRD_DEVICEPRIVATE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_DEVICEPRIVATE );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_BUSNUMBER(
    IN CM_PRD_BUSNUMBER *Source,
    OUT CM_PRD_BUSNUMBER_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_BUSNUMBER->CM_PRD_BUSNUMBER_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_BUSNUMBER );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PRD_DEVICESPECIFICDATA(
    IN CM_PRD_DEVICESPECIFICDATA *Source,
    OUT CM_PRD_DEVICESPECIFICDATA_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PRD_DEVICESPECIFICDATA->CM_PRD_DEVICESPECIFICDATA_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PRD_DEVICESPECIFICDATA );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PARTIAL_RESOURCE_DESCRIPTOR(
    IN CM_PARTIAL_RESOURCE_DESCRIPTOR *Source,
    OUT CM_PARTIAL_RESOURCE_DESCRIPTOR_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PARTIAL_RESOURCE_DESCRIPTOR->CM_PARTIAL_RESOURCE_DESCRIPTOR_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PARTIAL_RESOURCE_DESCRIPTOR );
    return status;
}


ARC_STATUS
__inline
static
Copy_CM_PARTIAL_RESOURCE_LIST(
    IN CM_PARTIAL_RESOURCE_LIST *Source,
    OUT CM_PARTIAL_RESOURCE_LIST_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy CM_PARTIAL_RESOURCE_LIST->CM_PARTIAL_RESOURCE_LIST_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_CM_PARTIAL_RESOURCE_LIST );
    return status;
}


ARC_STATUS
__inline
static
Copy_LARGE_INTEGER(
    IN LARGE_INTEGER *Source,
    OUT LARGE_INTEGER_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy LARGE_INTEGER->LARGE_INTEGER_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_LARGE_INTEGER );
    return status;
}


ARC_STATUS
__inline
static
Copy_PO_HIBER_PERF(
    IN PO_HIBER_PERF *Source,
    OUT PO_HIBER_PERF_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PO_HIBER_PERF->PO_HIBER_PERF_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PO_HIBER_PERF );
    return status;
}


ARC_STATUS
__inline
static
Copy_PO_MEMORY_IMAGE(
    IN PO_MEMORY_IMAGE *Source,
    OUT PO_MEMORY_IMAGE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PO_MEMORY_IMAGE->PO_MEMORY_IMAGE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PO_MEMORY_IMAGE );
    return status;
}


ARC_STATUS
__inline
static
Copy_PO_MEMORY_RANGE_ARRAY_RANGE(
    IN PO_MEMORY_RANGE_ARRAY_RANGE *Source,
    OUT PO_MEMORY_RANGE_ARRAY_RANGE_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PO_MEMORY_RANGE_ARRAY_RANGE->PO_MEMORY_RANGE_ARRAY_RANGE_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PO_MEMORY_RANGE_ARRAY_RANGE );
    return status;
}


ARC_STATUS
__inline
static
Copy_PO_MEMORY_RANGE_ARRAY_LINK(
    IN PO_MEMORY_RANGE_ARRAY_LINK *Source,
    OUT PO_MEMORY_RANGE_ARRAY_LINK_64 *Destination
    )
{
    ARC_STATUS status = ESUCCESS;
    DbgPrint("BLAMD64: Copy PO_MEMORY_RANGE_ARRAY_LINK->PO_MEMORY_RANGE_ARRAY_LINK_64 (0x%08x->0x%08x)\n",
             (ULONG)Source, (ULONG)Destination );

    CopyRec( Source, Destination, cr3264_PO_MEMORY_RANGE_ARRAY_LINK );
    return status;
}


